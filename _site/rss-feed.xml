<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>rolling pebble</title>
		<description>rolling pebble</description>
		<link>https://www.rollingpebbles.com</link>
		<atom:link href="https://www.rollingpebbles.com/feed.xml" rel="self" type="application/rss+xml" />
		
			<item>
				<title>Tech Behind this Blog</title>
				<description>&lt;p&gt;From last 2-3 weeks I have been working on creating this blog. Still there are few items remaining to be completed.&lt;/p&gt;

&lt;p&gt;I was looking for something that is free and provides maximum flexibility. Static site generators and &lt;a href=&quot;https://pages.github.com&quot;&gt;Github pages&lt;/a&gt; support for static sites looked promising. One of the things that I loved of this setup is writing posts in your preferred editor and complete control over your data.
&lt;!--more--&gt;
Initially I was inclined towards python based site generators as it will give me an opportunity to learn python but I ended up with &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; as of its github pages support. Now I am happy with Jekyll even though I am not using github pages jekyll support.&lt;/p&gt;

&lt;h3 id=&quot;initial-setup&quot;&gt;Initial Setup&lt;/h3&gt;

&lt;script type=&quot;text/javascript&quot; src=&quot;https://public.tableau.com/javascripts/api/viz_v1.js&quot;&gt;&lt;/script&gt;
&lt;div class=&quot;tableauPlaceholder&quot; style=&quot;width: 804px; height: 669px;&quot;&gt;&lt;noscript&gt;&lt;a href=&quot;#&quot;&gt;&lt;img alt=&quot;Startup Quadrant &quot; src=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;Pr&amp;#47;Practice-ParameterControlofDynamicsets&amp;#47;StartupQuadrant&amp;#47;1_rss.png&quot; style=&quot;border: none&quot; /&gt;&lt;/a&gt;&lt;/noscript&gt;&lt;object class=&quot;tableauViz&quot; width=&quot;804&quot; height=&quot;669&quot; style=&quot;display:none;&quot;&gt;&lt;param name=&quot;host_url&quot; value=&quot;https%3A%2F%2Fpublic.tableau.com%2F&quot; /&gt; &lt;param name=&quot;site_root&quot; value=&quot;&quot; /&gt;&lt;param name=&quot;name&quot; value=&quot;Practice-ParameterControlofDynamicsets&amp;#47;StartupQuadrant&quot; /&gt;&lt;param name=&quot;tabs&quot; value=&quot;no&quot; /&gt;&lt;param name=&quot;toolbar&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;static_image&quot; value=&quot;https:&amp;#47;&amp;#47;public.tableau.com&amp;#47;static&amp;#47;images&amp;#47;Pr&amp;#47;Practice-ParameterControlofDynamicsets&amp;#47;StartupQuadrant&amp;#47;1.png&quot; /&gt; &lt;param name=&quot;animate_transition&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_static_image&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_spinner&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_overlay&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;display_count&quot; value=&quot;yes&quot; /&gt;&lt;param name=&quot;showTabs&quot; value=&quot;y&quot; /&gt;&lt;/object&gt;&lt;/div&gt;

&lt;p&gt;I started looking out for available themes built on jekyll for a starting point. Bootstrap and foundation both are great front end frameworks. As most of the themes I saw were developed on Bootstrap, I thought of using foundation as it might help me to get a different look and feel.&lt;/p&gt;

&lt;p&gt;There are not many boilerplate code/themes available for jekyll in &lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;foundation&lt;/a&gt;. I started building it ground up following instructions from &lt;a href=&quot;http://learningwithsage.com/wp/a-guide-to-setting-up-a-jekyll-and-foundation-based-site-in-github/&quot;&gt;Code daddy&lt;/a&gt;. It started appearing to be a time consuming task and in the mean time I found an excellent theme, &lt;a href=&quot;https://phlow.github.io/feeling-responsive/&quot;&gt;Feeling responsive&lt;/a&gt; developed on foundation. The best part I liked about this theme is it contains all the possible layouts I might need.&lt;/p&gt;

&lt;p&gt;After customizing and including only the required parts of the theme, I have my blog up and running on github(with jekyll support) within few days. Thanks to &lt;a href=&quot;https://phlow.github.io/feeling-responsive/&quot;&gt;feeling responsive&lt;/a&gt;, &lt;a href=&quot;http://jekyllrb.com&quot;&gt;jekyll&lt;/a&gt;, &lt;a href=&quot;https://pages.github.com&quot;&gt;github pages&lt;/a&gt; and &lt;a href=&quot;http://foundation.zurb.com/&quot;&gt;foundation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At this point I had following requirements:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Provide search on posts.&lt;/li&gt;
  &lt;li&gt;Build an archive page.&lt;/li&gt;
  &lt;li&gt;Easy way to update the js/ui libraries.&lt;/li&gt;
  &lt;li&gt;Automation of tasks for js/css minification and deployment.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;search-and-archives&quot;&gt;Search and Archives&lt;/h3&gt;

&lt;p&gt;There are many available ways to provide search on static sites. Google custom search is a good option but it may require creation of an overlay or moving the control to a different page.&lt;/p&gt;

&lt;p&gt;For archives,  it will be nice to have an easy access of posts by year/month or tag. One way to achieve this is  creating separate pages for each tag, month/year, which does not look a great solution.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://lunrjs.com&quot;&gt;Lunr&lt;/a&gt; is an excellent javascript library that provides client side search based on reverse document lookup. It will be very fast as no network calls are involved.&lt;/p&gt;

&lt;p&gt;One alternative for lunr can be using Bloom filters. Bloom filters provide fast lookups to check if a word is present in a  document(using hash of the document). It works on probability model and may result in returning a document even if the searched word is not present in it. However it will not miss any documents containing the searched word. Using Bloom filters will require additional work to support searches on multiple words. I continued with lunr as it will be easy to integrate and sufficient for the needs.&lt;/p&gt;

&lt;p&gt;Lunr provides an api for indexing and searching. All posts/pages to be made searchable will be added for indexing. Enabling search for all content of the posts may cause performance issues in future when number of blogs grow.&lt;/p&gt;

&lt;p&gt;Indexing is relatively a slow process. One approach for optimization is indexing at the backend. Lunr provides support to create index file and loading it later. I used node.js environment for executing javascript at backend for index creation.&lt;/p&gt;

&lt;p&gt;I merged my ideas for archives and search into a single page:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Search is enabled only for tags.&lt;/li&gt;
  &lt;li&gt;A section is added on this page containing all the tags and number of posts under each tag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;It may sound an over-optimization on limiting the searches to tags for performance but it is sufficient for my needs.
Including year and month also in the search will solve the problem for archive pages.&lt;/p&gt;

&lt;p&gt;A point to note about lunr(version: 0.5.11) is it provides searches only for “and” conditions between the search terms. I hope, support for boolean queries will eventually happen in future releases.&lt;/p&gt;

&lt;h3 id=&quot;github-pages-with-nojekyll&quot;&gt;Github pages with nojekyll&lt;/h3&gt;

&lt;p&gt;Index creation at backend requires some support from github pages while it generates the site using jekyll. As github pages executes jekyll in safe mode, I cant add any plugin for indexing at backend. Thus I have to manually index at my local machine and push it to github.&lt;/p&gt;

&lt;p&gt;It seems like a big limitation for not having any possibility to add plugins to github pages. It may cause more problems in future when I work on some data sources for doing some stats and putting few D3 plots on the blog.&lt;/p&gt;

&lt;p&gt;This resulted in creating two branches on github: one branch for code and other branch(master) for the generated content.&lt;/p&gt;

&lt;h3 id=&quot;maintaining-updates-of-libs&quot;&gt;Maintaining updates of libs&lt;/h3&gt;

&lt;p&gt;While working for indexing at backend, I saw a new release for lunr. To use it I need to again copy it to my dev environment. It was definitely not a great way for maintaining updates.&lt;/p&gt;

&lt;p&gt;From my limited or no experience with UI, I was not aware of any tools for package management. I found an excellent &lt;a href=&quot;http://tech.pro/tutorial/1190/package-managers-an-introductory-guide-for-the-uninitiated-front-end-developer#front_end_developers&quot;&gt;post&lt;/a&gt; on package management tools: &lt;a href=&quot;https://www.npmjs.com&quot;&gt;npm&lt;/a&gt; and &lt;a href=&quot;http://bower.io&quot;&gt;bower&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Npm provides support for package management for backend js libraries. Bower is a package management tool for front end(browser) and provide support for js,html and css components.&lt;/p&gt;

&lt;p&gt;Both Npm and Bower have very rich eco-systems around them. It seems like most, if not all, of the UI libraries are available though them.
This resulted in installing all backend libraries(like lunr) using npm and front end libraries(like foundation) using bower.&lt;/p&gt;

&lt;h3 id=&quot;automation&quot;&gt;Automation&lt;/h3&gt;

&lt;p&gt;Grunt and Gulp are two great build tools available. As a matter of choice, I preferred gulp style of code over configuration. I found a great &lt;a href=&quot;http://stefanimhoff.de/2014/gulp-tutorial-1-intro-setup&quot;&gt;tutorial&lt;/a&gt; that helped me setup all my build process. I ended up using most of the directory structure and gulp tasks from this tutorial.&lt;/p&gt;

&lt;p&gt;There are a lot of plugins available for gulp for doing almost every task that may be required. Whether it is a simple concat of js/css files, minifying js/css or deploying to gh-pages, a plugin is available for every task.&lt;/p&gt;

&lt;p&gt;With help of gulp and these great plugins, I completely automated the build process. Now using just one command can generate the site using jekyll, creates index, do minify js and css and as well as push all the changes to the server(github pages).&lt;/p&gt;

&lt;h3 id=&quot;client-side-mvc&quot;&gt;Client side MVC&lt;/h3&gt;

&lt;p&gt;I have also used an MVC framework, &lt;a href=&quot;http://backbonejs.org&quot;&gt;backbone&lt;/a&gt; for creating archives page. Backbone helped in many ways like browser history and creating book-markable urls for searched tags. Overall it gave a good organization to the code which otherwise might have ended up in a convoluted structure of DOM manipulations using jquery.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Blog creation ended up taking more time than it was planned but I completely enjoyed the process. From package management to MVC frameworks, I learned of the many great things going on with UI.&lt;/p&gt;

&lt;p&gt;While I liked the node.js excellent eco-system, I hope that same level of tools and packages for UI should be available for modern languages like clojure or scala. Javascript is not a great language to work on. It is relatively difficult to find issues with the code written in js and many times are silently ignored by interpreter.&lt;/p&gt;

</description>
				<pubDate>Fri, 10 Apr 2015 00:00:00 +0530</pubDate>
				<link>https://www.rollingpebbles.com/2015/04/10/tech-behind-this-blog.html</link>
				<guid isPermaLink="true">https://www.rollingpebbles.com/2015/04/10/tech-behind-this-blog.html</guid>
			</item>
		
			<item>
				<title>Jekyll Clean Theme</title>
				<description>&lt;ul&gt;
  &lt;li&gt;Get it from &lt;a href=&quot;https://github.com/scotte/jekyll-clean&quot;&gt;github&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;See the &lt;a href=&quot;https://scotte.github.io/jekyll-clean&quot;&gt;live demo&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;See it &lt;a href=&quot;https://scotte.org&quot;&gt;in action on my own blog&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Welcome to the sample post for the Jekyll Clean theme.&lt;/p&gt;

&lt;p&gt;A simple and clean Jekyll theme using &lt;a href=&quot;http://getbootstrap.com&quot;&gt;bootstrap&lt;/a&gt;
(not to be confused with jekyll-bootstrap) that’s easy to modify and very
modular in component and element reuse.&lt;/p&gt;

&lt;p&gt;It uses Disqus for comments and includes Google Analytics support. Both of
these features are disabled by default and can be enabled via _config.yml. You
can also rip this code out of the templates if you like (footer.html and post.html).
The beauty of Jekyll - keep things clean… Jekyll Clean!&lt;/p&gt;

&lt;p&gt;The theme works well on mobile phones, using a collapsable nav bar and hiding the
sidebar. The links pane in the sidebar is available on mobile through the nav menu,
and you can do the same thing for any other sections added to the sidebar.&lt;/p&gt;

&lt;p&gt;Don’t forget to occassionally merge against my upstream repository so you can get
the latest changes. Pull requests are encouraged and accepted!&lt;/p&gt;

&lt;p&gt;ok.&lt;/p&gt;

&lt;h2 id=&quot;installation&quot;&gt;Installation&lt;/h2&gt;

&lt;p&gt;If you don’t have a blog already on github, start by cloning this repository.
Best to do that directly on github and then clone that down to your computer.&lt;/p&gt;

&lt;p&gt;If you already do have a blog, You can certainly apply this theme to your existing
blog in place, but then you won’t be able to merge as the theme changes. If you
re-apply your blog history on top of this theme’s &lt;strong&gt;gh-pages&lt;/strong&gt; branch, it’s then
easy to update to the latest version of the theme. You also don’t want to have to
deal with resolving old conflicts from your existing history, so you may wish to to
push your existing master off to a new branch so you have the old history and start
a new branch with this as the start, merging in your _posts and other assets (after
git rm’ing the current _posts.&lt;/p&gt;

&lt;p&gt;Not ideal, but you have to make a choice - either apply it manually or base your
blog off this theme’s branch. Either way it will work, and both have their own
pros and cons.&lt;/p&gt;

&lt;p&gt;You can setup an upstream tracking repository like so:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ git remote add upstream git@github.com:scotte/jekyll-clean.git
&lt;/code&gt;
And now when you wish to merge your own branch onto the latest version of the
theme, simply do:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ git fetch upstream
$ git merge upstream/gh-pages
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Of course you will have to resolve conflicts for _config.yml, _includes/links-list.html,
and _posts, and so on, but in practice this is pretty simple.&lt;/p&gt;

&lt;p&gt;This is how I maintain my own blog which is based on this theme. The old history is
sitting in an &lt;strong&gt;old-master&lt;/strong&gt; branch that I can refer to when I need to.&lt;/p&gt;

&lt;h1 id=&quot;running-locally&quot;&gt;Running Locally&lt;/h1&gt;

&lt;p&gt;Here’s the exact set of packages I need to install on Debian to run jekyll
locally with this theme for testing.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ sudo aptitude install ruby ruby-dev rubygems nodejs
$ sudo gem install jekyll jekyll-paginate
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And then it’s just a simple matter of running jekyll locally:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
$ jekyll serve --baseurl=&#39;&#39;
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now browse to http://127.0.0.1:4000&lt;/p&gt;

&lt;h1 id=&quot;disqus-comments&quot;&gt;Disqus Comments&lt;/h1&gt;

&lt;p&gt;Getting Disqus to work can be a bit more work than it seems like it should be.
Make sure your Disqus account is correctly configured with the right domain
of your blog and you know your Disqus shortname.&lt;/p&gt;

&lt;p&gt;In _config.yml you’ll need to set &lt;strong&gt;disqus&lt;/strong&gt; to your Disqus shortname and
make sure &lt;strong&gt;comments&lt;/strong&gt; is true.&lt;/p&gt;

&lt;p&gt;Finally, in posts, make sure you have &lt;strong&gt;comments: true&lt;/strong&gt; in the YAML front
matter.&lt;/p&gt;

&lt;p&gt;More information on using Disqus with Jekyll is
&lt;a href=&quot;https://help.disqus.com/customer/portal/articles/472138-jekyll-installation-instructions&quot;&gt;documented here&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;code-syntax-highlighting&quot;&gt;Code Syntax Highlighting&lt;/h1&gt;

&lt;p&gt;To use code syntax highlighting, use the following syntax:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;
&lt;/code&gt;python
import random&lt;/p&gt;

&lt;h1 id=&quot;roll-the-die&quot;&gt;Roll the die&lt;/h1&gt;
&lt;p&gt;roll = random.randint(1, 20)
print(‘You rolled a %d.’ % roll)
&lt;code class=&quot;highlighter-rouge&quot;&gt;#REMOVE
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;(Remove #REMOVE from the end of the last line). Which will look like this in
the rendered jekyll output using the default css/syntax.css provided with this
theme (which is the &lt;strong&gt;colorful&lt;/strong&gt; theme from &lt;a href=&quot;https://github.com/iwootten/jekyll-syntax&quot;&gt;https://github.com/iwootten/jekyll-syntax&lt;/a&gt;):&lt;/p&gt;

&lt;p&gt;```python
import random&lt;/p&gt;

&lt;h1 id=&quot;roll-the-die-1&quot;&gt;Roll the die&lt;/h1&gt;
&lt;p&gt;roll = random.randint(1, 20)
print(‘You rolled a %d.’ % roll)
```&lt;/p&gt;

&lt;p&gt;You can, of course, use any theme you wish, see the jekyll and pygments
documentation for more details.&lt;/p&gt;

&lt;h1 id=&quot;license&quot;&gt;License&lt;/h1&gt;

&lt;p&gt;The content of this theme is distributed and licensed under a
&lt;img src=&quot;/images/cc_by_88x31.png&quot; alt=&quot;License Badge&quot; /&gt;
&lt;a href=&quot;https://creativecommons.org/licenses/by/4.0/legalcode&quot;&gt;Creative Commons Attribution 4.0 License&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;This license lets others distribute, remix, tweak, and build upon your work,
even commercially, as long as they credit you for the original creation. This
is the most accommodating of licenses offered. Recommended for maximum
dissemination and use of licensed materials.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In other words: you can do anything you want with this theme on any site, just please
provide a link to &lt;a href=&quot;https://github.com/scotte/jekyll-clean&quot;&gt;the original theme on github&lt;/a&gt;
so I get credit for the original design. Beyond that, have at it!&lt;/p&gt;

&lt;p&gt;This theme includes the following files which are the properties of their
respective owners:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;js/bootstrap.min.js - &lt;a href=&quot;http://getbootstrap.com&quot;&gt;bootstrap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;css/bootstrap.min.css - &lt;a href=&quot;http://getbootstrap.com&quot;&gt;bootstrap&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;js/jquery.min.js - &lt;a href=&quot;https://jquery.com&quot;&gt;jquery&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;images/cc_by_88x31.png - &lt;a href=&quot;https://creativecommons.org&quot;&gt;creative commons&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;css/colorful.css - &lt;a href=&quot;https://github.com/iwootten/jekyll-syntax&quot;&gt;iwootten/jekyll-syntax&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
				<pubDate>Sat, 23 Aug 2014 04:55:06 +0530</pubDate>
				<link>https://www.rollingpebbles.com/2014/08/23/jekyll-clean-theme.html</link>
				<guid isPermaLink="true">https://www.rollingpebbles.com/2014/08/23/jekyll-clean-theme.html</guid>
			</item>
		
	</channel>
</rss>
